"""
This type stub file was generated by pyright.
"""

import aiohttp
from abc import ABCMeta, abstractmethod
from typing import Literal
from typing_extensions import override
from aiohttp import web
from anyio.streams.memory import MemoryObjectReceiveStream, MemoryObjectSendStream
from sekaibot.adapter import Adapter
from sekaibot.typing import ConfigT, EventT

"""适配器实用工具。

这里定义了一些在编写适配器时常用的基类，适配器开发者可以直接继承自这里的类或者用作参考。
"""
__all__ = ["HttpClientAdapter", "HttpServerAdapter", "PollingAdapter", "WebSocketAdapter", "WebSocketClientAdapter", "WebSocketServerAdapter"]
class PollingAdapter(Adapter[EventT, ConfigT], metaclass=ABCMeta):
    """轮询式适配器示例。"""
    @override
    async def run(self) -> None:
        ...
    
    @abstractmethod
    async def on_tick(self) -> None:
        """当轮询发生。"""
        ...
    


class HttpClientAdapter(PollingAdapter[EventT, ConfigT], metaclass=ABCMeta):
    """HTTP 客户端适配器示例。"""
    session: aiohttp.ClientSession
    @override
    async def startup(self) -> None:
        ...
    
    @override
    async def shutdown(self) -> None:
        ...
    


class WebSocketClientAdapter(Adapter[EventT, ConfigT], metaclass=ABCMeta):
    """WebSocket 客户端适配器示例。"""
    url: str
    @override
    async def run(self) -> None:
        ...
    
    @abstractmethod
    async def handle_response(self, msg: aiohttp.WSMessage) -> None:
        """处理响应。"""
        ...
    


class HttpServerAdapter(Adapter[EventT, ConfigT], metaclass=ABCMeta):
    """HTTP 服务端适配器示例。"""
    app: web.Application
    runner: web.AppRunner
    site: web.TCPSite
    host: str
    port: int
    get_url: str
    post_url: str
    @override
    async def startup(self) -> None:
        ...
    
    @override
    async def run(self) -> None:
        ...
    
    @override
    async def shutdown(self) -> None:
        ...
    
    @abstractmethod
    async def handle_response(self, request: web.Request) -> web.StreamResponse:
        """处理响应。"""
        ...
    


class WebSocketServerAdapter(Adapter[EventT, ConfigT], metaclass=ABCMeta):
    """WebSocket 服务端适配器示例。"""
    app: web.Application
    runner: web.AppRunner
    site: web.TCPSite
    websocket: web.WebSocketResponse
    host: str
    port: int
    url: str
    _msg_send_stream: MemoryObjectSendStream[aiohttp.WSMessage]
    _msg_receive_stream: MemoryObjectReceiveStream[aiohttp.WSMessage]
    @override
    async def startup(self) -> None:
        ...
    
    @override
    async def run(self) -> None:
        ...
    
    @override
    async def shutdown(self) -> None:
        ...
    
    async def handle_response(self, request: web.Request) -> web.WebSocketResponse:
        """处理 WebSocket。"""
        ...
    
    @abstractmethod
    async def handle_ws_response(self, msg: aiohttp.WSMessage) -> None:
        """处理 WebSocket 响应。"""
        ...
    


class WebSocketAdapter(Adapter[EventT, ConfigT], metaclass=ABCMeta):
    """WebSocket 适配器示例。

    同时支持 WebSocket 客户端和服务端。
    """
    websocket: web.WebSocketResponse | aiohttp.ClientWebSocketResponse | None = ...
    session: aiohttp.ClientSession | None
    app: web.Application | None
    runner: web.AppRunner | None
    site: web.TCPSite | None
    adapter_type: Literal["ws", "reverse-ws"]
    host: str
    port: int
    url: str
    reconnect_interval: int = ...
    _msg_send_stream: MemoryObjectSendStream[aiohttp.WSMessage]
    _msg_receive_stream: MemoryObjectReceiveStream[aiohttp.WSMessage]
    @override
    async def startup(self) -> None:
        """初始化适配器。"""
        ...
    
    @override
    async def run(self) -> None:
        ...
    
    @override
    async def shutdown(self) -> None:
        ...
    
    async def handle_reverse_ws_response(self, request: web.Request) -> web.WebSocketResponse:
        """处理 aiohttp WebSocket 服务器的接收。"""
        ...
    
    async def reverse_ws_connection_hook(self) -> None:
        """反向 WebSocket 连接建立时的钩子函数。"""
        ...
    
    async def websocket_connect(self) -> None:
        """创建正向 WebSocket 连接。"""
        ...
    
    async def handle_websocket(self) -> None:
        """处理 WebSocket。"""
        ...
    
    @abstractmethod
    async def handle_websocket_msg(self, msg: aiohttp.WSMessage) -> None:
        """处理 WebSocket 消息。"""
        ...
    


