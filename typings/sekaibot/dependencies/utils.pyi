"""
This type stub file was generated by pyright.
"""

from collections.abc import AsyncGenerator, Awaitable, Callable, Generator
from contextlib import AbstractAsyncContextManager, AbstractContextManager, AsyncExitStack
from typing import Any, TypeVar, Union
from typing_extensions import override

"""SekaiBot 依赖注入。

实现依赖注入相关功能。
"""
_T = TypeVar("_T")
Dependency = Union[type[_T | AbstractAsyncContextManager[_T] | AbstractContextManager[_T]], Callable[[], AsyncGenerator[_T, None]], Callable[[], Generator[_T, None, None]], Callable[..., _T], Callable[..., Awaitable[_T]],]
class InnerDepends:
    """子依赖的内部实现。

    用户无需关注此内部实现。

    Attributes:
        dependency: 依赖类。如果不指定则根据字段的类型注释自动判断。
        use_cache: 是否使用缓存。默认为 `True`。
    """
    dependency: Dependency[Any] | None
    use_cache: bool
    def __init__(self, dependency: Dependency[Any] | None = ..., *, use_cache: bool = ...) -> None:
        ...
    
    @override
    def __repr__(self) -> str:
        ...
    


def get_dependency_name(dependency: Dependency[Any]) -> str:
    """获取 Dependency[Any] 的名称，正确区分类、函数、实例等"""
    ...

async def solve_dependencies(dependent: Dependency[_T], *, use_cache: bool = ..., stack: AsyncExitStack | None = ..., dependency_cache: dict[Any, Any]) -> _T:
    """解析子依赖，包括 `__call__` 方法的可调用类实例。

    Args:
        dependent: 依赖对象，可能是类、类实例、函数、生成器等。
        use_cache: 是否使用缓存，避免重复解析。
        stack: `AsyncExitStack` 对象，用于管理上下文依赖。
        dependency_cache: 已解析的依赖缓存。

    Raises:
        TypeError: `dependent` 解析失败。

    Returns:
        解析完成依赖的对象。
    """
    ...

