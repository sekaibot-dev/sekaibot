"""
This type stub file was generated by pyright.
"""

import anyio
from collections.abc import Awaitable, Callable
from contextlib import AsyncExitStack
from copy import deepcopy
from typing import Any, NoReturn, Self, TYPE_CHECKING, cast, final
from typing_extensions import override
from exceptiongroup import catch
from sekaibot.dependencies import Dependency, Depends, solve_dependencies_in_bot
from sekaibot.exceptions import SkipException
from sekaibot.internal.event import Event
from sekaibot.typing import GlobalStateT, NodeT, RuleCheckerT, StateT
from sekaibot.bot import Bot

"""SekaiBot Rule类

所有 Rule 类的基类
"""
if TYPE_CHECKING:
    ...
__all__ = ["Rule", "RuleChecker"]
class Rule:
    """{ref}`nonebot.matcher.Matcher` 规则类。

    当事件传递时，在 {ref}`nonebot.matcher.Matcher` 运行前进行检查。

    Args:
        *checkers: RuleChecker

    用法:
        ```python
        Rule(async_function) & sync_function
        # 等价于
        Rule(async_function, sync_function)
        ```
    """
    __slots__ = ...
    def __init__(self, *checkers: RuleCheckerT | Dependency[bool]) -> None:
        ...
    
    @override
    def __repr__(self) -> str:
        ...
    
    async def __call__(self, bot: Bot, event: Event[Any], state: StateT, global_state: GlobalStateT, stack: AsyncExitStack | None = ..., dependency_cache: dict[Any, Any] | None = ...) -> bool:
        """检查是否符合所有规则

        Args:
            bot: Bot 对象
            event: Event 对象
            state: 当前 State
            global_state: 当前机器人公用 State
            stack: 异步上下文栈
            dependency_cache: 依赖缓存
        """
        ...
    
    def __and__(self, other: Rule | RuleCheckerT | None) -> Rule:
        """and方法"""
        ...
    
    def __rand__(self, other: Rule | RuleCheckerT | None) -> Rule:
        """rand方法"""
        ...
    
    def __or__(self, other: object) -> NoReturn:
        """or方法"""
        ...
    
    def __add__(self, other: Rule | RuleCheckerT | None) -> Rule:
        """add方法"""
        ...
    
    def __iadd__(self, other: Rule | RuleCheckerT | None) -> Self:
        """iadd方法"""
        ...
    
    def __sub__(self, other: object) -> NoReturn:
        """禁止 sub"""
        ...
    


class RuleChecker:
    """抽象基类，匹配消息规则。"""
    _rule: Rule
    def __init__(self, rule: Rule) -> None:
        ...
    
    def __call__(self, cls: NodeT) -> NodeT:
        """将检查器添加到 Node 类中。"""
        ...
    
    @classmethod
    def Checker(cls, *args: Any, **kwargs: Any) -> bool:
        """默认实现检查方法的依赖注入方法，子类可覆盖。"""
        ...
    


