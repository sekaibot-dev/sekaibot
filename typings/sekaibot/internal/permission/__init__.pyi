"""
This type stub file was generated by pyright.
"""

import anyio
from collections.abc import Awaitable, Callable
from contextlib import AsyncExitStack
from copy import deepcopy
from typing import Any, NoReturn, Self, TYPE_CHECKING, cast, final
from typing_extensions import override
from exceptiongroup import catch
from sekaibot.dependencies import Dependency, Depends, solve_dependencies_in_bot
from sekaibot.exceptions import SkipException
from sekaibot.internal.event import Event
from sekaibot.typing import GlobalStateT, NodeT, PermissionCheckerT
from sekaibot.bot import Bot

"""SekaiBot 权限基类

所有权限类必须继承 Permission
"""
if TYPE_CHECKING:
    ...
class Permission:
    """{ref}`nonebot.matcher.Matcher` 权限类。

    当事件传递时，在 {ref}`nonebot.matcher.Matcher` 运行前进行检查。

    Args:
        checkers: PermissionChecker

    用法:
        ```python
        Permission(async_function) | sync_function
        # 等价于
        Permission(async_function, sync_function)
        ```
    """
    __slots__ = ...
    def __init__(self, *checkers: PermissionCheckerT | Dependency[bool]) -> None:
        ...
    
    @override
    def __repr__(self) -> str:
        ...
    
    async def __call__(self, bot: Bot, event: Event[Any], global_state: GlobalStateT | None = ..., stack: AsyncExitStack | None = ..., dependency_cache: dict[Any, Any] | None = ...) -> bool:
        """检查是否满足某个权限。

        Args:
            bot: Bot 对象
            event: Event 对象
            global_state: 公共状态
            stack: 异步上下文栈
            dependency_cache: 依赖缓存
        """
        ...
    
    def __and__(self, other: object) -> NoReturn:
        """禁止 and"""
        ...
    
    def __or__(self, other: Permission | PermissionCheckerT | None) -> Permission:
        """or方法"""
        ...
    
    def __ror__(self, other: Permission | PermissionCheckerT | None) -> Permission:
        """ror方法"""
        ...
    
    def __add__(self, other: Permission | PermissionCheckerT | None) -> Permission:
        """add方法"""
        ...
    
    def __iadd__(self, other: Permission | PermissionCheckerT | None) -> Self:
        """iadd方法"""
        ...
    
    def __sub__(self, other: object) -> NoReturn:
        """紧张 sub"""
        ...
    


class PermissionChecker:
    """抽象基类，匹配消息规则。"""
    _perm: Permission
    def __init__(self, perm: Permission) -> None:
        ...
    
    def __call__(self, cls: NodeT) -> NodeT:
        """将检查器添加到 Node 类中。"""
        ...
    
    @classmethod
    def Checker(cls, *args: Any, **kwargs: Any) -> bool:
        """默认实现检查方法的依赖注入方法，子类可覆盖。"""
        ...
    


