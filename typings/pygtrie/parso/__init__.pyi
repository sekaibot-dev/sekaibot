"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from typing import Dict, List

class _NormalizerMeta(type):
    def __new__(cls, name, bases, dct): # -> Self:
        ...
    


class Normalizer(metaclass=_NormalizerMeta):
    _rule_type_instances: Dict[str, List[type]] = ...
    _rule_value_instances: Dict[str, List[type]] = ...
    def __init__(self, grammar, config) -> None:
        ...
    
    def walk(self, node): # -> LiteralString:
        ...
    
    def visit(self, node): # -> LiteralString:
        ...
    
    @contextmanager
    def visit_node(self, node): # -> Generator[None, Any, None]:
        ...
    
    def visit_leaf(self, leaf):
        ...
    
    def initialize(self, node): # -> None:
        ...
    
    def finalize(self): # -> None:
        ...
    
    def add_issue(self, node, code, message): # -> Literal[True]:
        ...
    
    @classmethod
    def register_rule(cls, *, value=..., values=..., type=..., types=...): # -> Callable[..., Any]:
        """
        Use it as a class decorator::

            normalizer = Normalizer('grammar', 'config')
            @normalizer.register_rule(value='foo')
            class MyRule(Rule):
                error_code = 42
        """
        ...
    


class NormalizerConfig:
    normalizer_class = Normalizer
    def create_normalizer(self, grammar): # -> normalizer_class | None:
        ...
    


class Issue:
    def __init__(self, node, code, message) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class Rule:
    code: int
    message: str
    def __init__(self, normalizer) -> None:
        ...
    
    def is_issue(self, node):
        ...
    
    def get_node(self, node):
        ...
    
    def add_issue(self, node, code=..., message=...): # -> None:
        ...
    
    def feed_node(self, node): # -> None:
        ...
    


class RefactoringNormalizer(Normalizer):
    def __init__(self, node_to_str_map) -> None:
        ...
    
    def visit(self, node): # -> LiteralString:
        ...
    
    def visit_leaf(self, leaf):
        ...
    


