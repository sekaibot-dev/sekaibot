"""
This type stub file was generated by pyright.
"""

from inspect import Parameter
from jedi import debug
from jedi.inference.cache import inference_state_function_cache
from jedi.inference.base_value import ValueSet, ValueWrapper, iterator_to_value_set
from jedi.inference.filters import AttributeOverwrite, DictFilter
from jedi.inference.names import BaseTreeParamName, NameWrapper
from jedi.inference.compiled.value import EmptyCompiledName
from jedi.inference.value.instance import TreeInstance
from jedi.inference.value.klass import ClassMixin
from jedi.inference.gradual.base import GenericClass
from jedi.inference.gradual.generics import TupleGenericManager
from jedi.inference.signature import AbstractSignature

"""
Module is used to infer Django model fields.
"""
mapping = ...
_FILTER_LIKE_METHODS = ...
class DjangoModelName(NameWrapper):
    def __init__(self, cls, name, is_instance) -> None:
        ...
    
    def infer(self): # -> ValueSet:
        ...
    


def is_django_model_base(value):
    ...

def get_metaclass_filters(func): # -> Callable[..., list[DictFilter] | Any]:
    ...

def tree_name_to_values(func): # -> Callable[..., ValueSet | Any]:
    ...

def get_metaclass_signatures(func): # -> Callable[..., list[DjangoModelSignature] | Any]:
    ...

class ManagerWrapper(ValueWrapper):
    def py__getitem__(self, index_value_set, contextualized_node): # -> ValueSet:
        ...
    


class GenericManagerWrapper(AttributeOverwrite, ClassMixin):
    def py__get__on_class(self, calling_instance, instance, class_value):
        ...
    
    def with_generics(self, generics_tuple):
        ...
    


class FieldWrapper(ValueWrapper):
    def py__getitem__(self, index_value_set, contextualized_node): # -> ValueSet:
        ...
    


class GenericFieldWrapper(AttributeOverwrite, ClassMixin):
    def py__get__on_class(self, calling_instance, instance, class_value): # -> ValueSet:
        ...
    


class DjangoModelSignature(AbstractSignature):
    def __init__(self, value, field_names) -> None:
        ...
    
    def get_param_names(self, resolve_stars=...): # -> list[DjangoParamName]:
        ...
    


class DjangoParamName(BaseTreeParamName):
    def __init__(self, field_name) -> None:
        ...
    
    def get_kind(self): # -> Literal[_ParameterKind.KEYWORD_ONLY]:
        ...
    
    def infer(self):
        ...
    


class QuerySetMethodWrapper(ValueWrapper):
    def __init__(self, method, model_cls) -> None:
        ...
    
    def py__get__(self, instance, class_value): # -> ValueSet:
        ...
    


class QuerySetBoundMethodWrapper(ValueWrapper):
    def __init__(self, method, model_cls) -> None:
        ...
    
    def get_signatures(self): # -> list[DjangoModelSignature]:
        ...
    


