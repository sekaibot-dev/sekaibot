"""
This type stub file was generated by pyright.
"""

import ast
import numbers
import sys
import token
from ast import Module
from typing import Callable, List, Optional, TYPE_CHECKING, Tuple, Union, cast
from . import util
from .asttokens import ASTTokens
from .astroid_compat import BaseContainer as AstroidBaseContainer, astroid_node_classes as nc
from .util import AstNode

if TYPE_CHECKING:
  ...
_matching_pairs_left = ...
_matching_pairs_right = ...
class MarkTokens:
  """
  Helper that visits all nodes in the AST tree and assigns .first_token and .last_token attributes
  to each of them. This is the heart of the token-marking logic.
  """
  def __init__(self, code: ASTTokens) -> None:
    ...
  
  def visit_tree(self, node: Module) -> None:
    ...
  
  def visit_default(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def handle_comp(self, open_brace: str, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def visit_comprehension(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def visit_if(self, node: util.Token, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def handle_attr(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  visit_attribute = ...
  visit_assignattr = ...
  visit_delattr = ...
  def handle_def(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  visit_classdef = ...
  visit_functiondef = ...
  def handle_following_brackets(self, node: AstNode, last_token: util.Token, opening_bracket: str) -> util.Token:
    ...
  
  def visit_call(self, node: util.Token, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def visit_matchclass(self, node: util.Token, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def visit_subscript(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def visit_slice(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def handle_bare_tuple(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def handle_tuple_nonempty(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def visit_tuple(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def visit_str(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def visit_joinedstr(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def visit_bytes(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def handle_str(self, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def handle_num(self, node: AstNode, value: Union[complex, int, numbers.Number], first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def visit_num(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def visit_const(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  visit_constant = ...
  def visit_keyword(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def visit_starred(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def visit_assignname(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  def handle_async(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  
  visit_asyncfor = ...
  visit_asyncwith = ...
  def visit_asyncfunctiondef(self, node: AstNode, first_token: util.Token, last_token: util.Token) -> Tuple[util.Token, util.Token]:
    ...
  


