"""
This type stub file was generated by pyright.
"""

import os
import stat
import time
import collections.abc as collections_abc
import cPickle as pickle
import errno
import sys
from pathlib import Path

""" PickleShare - a small 'shelve' like datastore with concurrency support

Like shelve, a PickleShareDB object acts like a normal dictionary. Unlike
shelve, many processes can access the database simultaneously. Changing a
value in database is immediately visible to other processes accessing the
same database.

Concurrency is possible because the values are stored in separate files. Hence
the "database" is a directory where *all* files are governed by PickleShare.

Example usage::

    from pickleshare import *
    db = PickleShareDB('~/testpickleshare')
    db.clear()
    print "Should be empty:",db.items()
    db['hello'] = 15
    db['aku ankka'] = [1,2,313]
    db['paths/are/ok/key'] = [1,(5,46)]
    print db.keys()
    del db['aku ankka']

This module is certainly not ZODB, but can be used for low-load
(non-mission-critical) situations where tiny code size trumps the
advanced features of a "real" object database.

Installation guide: pip install pickleshare

Author: Ville Vainio <vivainio@gmail.com>
License: MIT open source license.

"""
__version__ = ...
if sys.version_info[0] >= 3:
    string_types = ...
else:
    ...
def gethashfile(key): # -> str:
    ...

_sentinel = ...
class PickleShareDB(collections_abc.MutableMapping):
    """ The main 'connection' object for PickleShare database """
    def __init__(self, root) -> None:
        """ Return a db object that will manage the specied directory"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """ db['key'] reading """
        ...
    
    def __setitem__(self, key, value): # -> None:
        """ db['key'] = 5 """
        ...
    
    def hset(self, hashroot, key, value): # -> None:
        """ hashed set """
        ...
    
    def hget(self, hashroot, key, default=..., fast_only=...): # -> object:
        """ hashed get """
        ...
    
    def hdict(self, hashroot): # -> dict[Any, Any]:
        """ Get all data contained in hashed category 'hashroot' as dict """
        ...
    
    def hcompress(self, hashroot): # -> None:
        """ Compress category 'hashroot', so hset is fast again

        hget will fail if fast_only is True for compressed items (that were
        hset before hcompress).

        """
        ...
    
    def __delitem__(self, key): # -> None:
        """ del db["key"] """
        ...
    
    def keys(self, globpat=...): # -> list[str]:
        """ All keys in DB, or all keys matching a glob"""
        ...
    
    def __iter__(self): # -> Iterator[str]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def uncache(self, *items): # -> None:
        """ Removes all, or specified items from cache

        Use this after reading a large amount of large objects
        to free up memory, when you won't be needing the objects
        for a while.

        """
        ...
    
    def waitget(self, key, maxwaittime=...): # -> Any | None:
        """ Wait (poll) for a key to get a value

        Will wait for `maxwaittime` seconds before raising a KeyError.
        The call exits normally if the `key` field in db gets a value
        within the timeout period.

        Use this for synchronizing different processes or for ensuring
        that an unfortunately timed "db['key'] = newvalue" operation
        in another process (which causes all 'get' operation to cause a
        KeyError for the duration of pickling) won't screw up your program
        logic.
        """
        ...
    
    def getlink(self, folder): # -> PickleShareLink:
        """ Get a convenient link for accessing items  """
        ...
    
    def __repr__(self): # -> str:
        ...
    


class PickleShareLink:
    """ A shortdand for accessing nested PickleShare data conveniently.

    Created through PickleShareDB.getlink(), example::

        lnk = db.getlink('myobjects/test')
        lnk.foo = 2
        lnk.bar = lnk.foo + 5

    """
    def __init__(self, db, keydir) -> None:
        ...
    
    def __getattr__(self, key): # -> Any:
        ...
    
    def __setattr__(self, key, val): # -> None:
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    


def main(): # -> None:
    ...

if __name__ == "__main__":
    ...
