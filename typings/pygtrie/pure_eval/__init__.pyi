"""
This type stub file was generated by pyright.
"""

import ast
import enum
import typing
from collections import OrderedDict, deque
from datetime import date, datetime, time
from decimal import Decimal
from fractions import Fraction

class CannotEval(Exception):
    def __repr__(self): # -> str:
        ...
    
    __str__ = ...


def is_any(x, *args): # -> bool:
    ...

def of_type(x, *types):
    ...

def of_standard_types(x, *, check_dict_values: bool, deep: bool):
    ...

def is_standard_types(x, *, check_dict_values: bool, deep: bool): # -> bool:
    ...

class _E(enum.Enum):
    ...


class _C:
    def foo(self): # -> None:
        ...
    
    def bar(self): # -> None:
        ...
    
    @classmethod
    def cm(cls): # -> None:
        ...
    
    @staticmethod
    def sm(): # -> None:
        ...
    


safe_name_samples = ...
typing_annotation_samples = ...
safe_name_types = ...
typing_annotation_types = ...
def eq_checking_types(a, b): # -> Literal[False]:
    ...

def ast_name(node): # -> _Identifier | None:
    ...

def safe_name(value): # -> Any | Literal['Optional', 'Union'] | None:
    ...

def has_ast_name(value, node): # -> Literal[False]:
    ...

def copy_ast_without_context(x): # -> AST | list[Any]:
    ...

def ensure_dict(x): # -> dict[Any, Any]:
    """
    Handles invalid non-dict inputs
    """
    ...

