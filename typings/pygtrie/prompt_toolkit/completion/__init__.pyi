"""
This type stub file was generated by pyright.
"""

from typing import Callable, Iterable, Mapping, Pattern, Sequence
from prompt_toolkit.completion import CompleteEvent, Completer, Completion
from prompt_toolkit.document import Document
from prompt_toolkit.formatted_text import AnyFormattedText

__all__ = ["WordCompleter"]
class WordCompleter(Completer):
    """
    Simple autocompletion on a list of words.

    :param words: List of words or callable that returns a list of words.
    :param ignore_case: If True, case-insensitive completion.
    :param meta_dict: Optional dict mapping words to their meta-text. (This
        should map strings to strings or formatted text.)
    :param WORD: When True, use WORD characters.
    :param sentence: When True, don't complete by comparing the word before the
        cursor, but by comparing all the text before the cursor. In this case,
        the list of words is just a list of strings, where each string can
        contain spaces. (Can not be used together with the WORD option.)
    :param match_middle: When True, match not only the start, but also in the
                         middle of the word.
    :param pattern: Optional compiled regex for finding the word before
        the cursor to complete. When given, use this regex pattern instead of
        default one (see document._FIND_WORD_RE)
    """
    def __init__(self, words: Sequence[str] | Callable[[], Sequence[str]], ignore_case: bool = ..., display_dict: Mapping[str, AnyFormattedText] | None = ..., meta_dict: Mapping[str, AnyFormattedText] | None = ..., WORD: bool = ..., sentence: bool = ..., match_middle: bool = ..., pattern: Pattern[str] | None = ...) -> None:
        ...
    
    def get_completions(self, document: Document, complete_event: CompleteEvent) -> Iterable[Completion]:
        ...
    


